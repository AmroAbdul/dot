import{a as t}from"../../../browser-polyfill-83de79d0.js";import{G as i,S as h,U as y,V as g,W as f,X as w,H as k}from"../../../action-e5aa2048.js";import{v}from"../../../vocabulary-3d78ce72.js";import{o as b,a as q}from"../../../common-51435755.js";t.contextMenus?.create({id:"open-translator",type:"normal",title:"OpenAI Translator",contexts:["page","selection"]},()=>{t.runtime.lastError});t.contextMenus?.onClicked.addListener(async function(e){const[s]=await chrome.tabs.query({active:!0,lastFocusedWindow:!0});s.id&&t.tabs.sendMessage(s.id,{type:"open-translator",info:e})});async function A(e,s,a){if(!s.details)throw new Error("No fetch details");const{url:r,options:o}=s.details;let n=null;try{n=await fetch(r,{...o,signal:a})}catch(c){if(c instanceof Error){const{message:u,name:l}=c;e.postMessage({error:{message:u,name:l}})}e.disconnect();return}const m={ok:n.ok,status:n.status,statusText:n.statusText,redirected:n.redirected,type:n.type,url:n.url},d=n?.body?.getReader();if(!d){e.postMessage(m);return}try{for(;;){const{done:c,value:u}=await d.read();if(c)break;const l=new TextDecoder().decode(u);e.postMessage({...m,data:l})}}catch(c){if(c instanceof Error){const{message:u,name:l}=c;e.postMessage({error:{message:u,name:l}})}}finally{e.disconnect(),d.releaseLock()}}t.runtime.onConnect.addListener(async function(e){switch(e.name){case i.fetch:const s=new AbortController,{signal:a}=s;e.onMessage.addListener(function(r){switch(r.type){case"abort":s.abort();break;case"open":A(e,r,a);break}});return}});async function p(e,s){const{method:a,args:r}=e,o=s[a](...r);return o instanceof Promise?{result:await o}:{result:o}}t.runtime.onMessage.addListener(async e=>{switch(e.type){case i.vocabularyService:return await p(e,v);case i.actionService:return await p(e,k);case i.getItem:return{value:(await t.storage.local.get(e.key))[e.key]};case i.setItem:return await t.storage.local.set({[e.key]:e.value});case i.removeItem:return await t.storage.local.remove(e.key);case"openOptionsPage":await t.storage.local.set({[b]:e.openaiAPIKeyPromotionID}),await t.storage.local.set({[q]:e.headerPromotionID}),t.runtime.openOptionsPage();return}});t.commands.onCommand.addListener(async e=>{switch(e){case"open-popup":await t.windows.create({type:"popup",url:"/src/browser-extension/popup/index.html"})}});try{t.webRequest.onBeforeRequest.addListener(e=>{if(e.url.includes("/public_key")&&!e.url.includes(h)){if(!e.requestBody)return;const s=new URLSearchParams;for(const a in e.requestBody.formData)s.append(a,e.requestBody.formData[a]);t.storage.local.set({[y]:e.url,[g]:s.toString()||new TextDecoder("utf-8").decode(new Uint8Array(e.requestBody.raw?.[0].bytes))}).then(()=>{console.log("Arkose req url and form saved")})}},{urls:["https://*.openai.com/*"],types:["xmlhttprequest"]},["requestBody"]),t.webRequest.onBeforeSendHeaders.addListener(e=>{if(e.url.includes("/api/user")){const r=((e.requestHeaders||[]).find(o=>o.name==="Authorization")?.value||"").split(" ")[1];t.storage.local.set({[f]:r}).then(()=>{console.log("Kimi access_token saved")})}},{urls:["https://*.moonshot.cn/*"],types:["xmlhttprequest"]},["requestHeaders"]),t.webRequest.onBeforeSendHeaders.addListener(e=>{if(e.url.includes("/chatglm/user-api/user/info")){const r=((e.requestHeaders||[]).find(o=>o.name==="Authorization")?.value||"").split(" ")[1];t.storage.local.set({[w]:r}).then(()=>{console.log("Kimi access_token saved")})}},{urls:["https://*.chatglm.cn/*"],types:["xmlhttprequest"]},["requestHeaders"])}catch(e){console.error("Error adding webRequest listener",e)}
